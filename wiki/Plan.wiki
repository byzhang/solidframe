#summary Planned additions and changes

<wiki:toc max_depth="1" />

Features for 1.0 version
 # (1) DONE: IPC gateway - relay IPC data through TCP for site-to-site communication
 # (02) DONE: Move everything under solid and solid::frame namespaces
 # (05) DONE: Refactor solid::frame::Manager (ex. foundation::Manager)
 # (10) DONE: New binary protocol for client-server apps
 # (15) STARTED: A distributed chat example (using the binary protocol) along with a stress client.
 # (20) DONE: Move the entire code under more liberal boost 1.0 license
 # (25) PENDING: frame::SharedManager - asynchronous read/write lock. Replace frame::file::Manager
 # (30) DONE: Proper file rotation for debug
 # (35) DONE: Per service debug log level mask support and register all services on init
 # (40) PENDING: make install

Pool of pending features and changes
 # (10) (IPC) add nocompression message flag. The ipc module will try to send most of message's buffers without compression. This is for signals containing already compressed data.
 # (10) (IPC) add support for adaptable compression. A message is started with with compression. If certain continuous buffers have a compression ration below a certain threshold the compression is switched off for the signal. 
 # (30) Add support for GnuTLS, test performance against boost, solidframe::openssl.
  # Add new class AccessManager: a container which will manage read/write access to its objects - a generalization of file::Manager.
 # Investigate the use of boost as back-end for frame.
 # Re-factor frame::file::Manager to be based on frame::AccessManager.
 # Add support for Unix domain addresses.
 # Add a new foundation::ipc::local::Service service suitable for communication between applications on the same machine. The current ipc service is fitted for the server side. On the client side, for security reasons we have to prevent other users' applications connect to the application of the current user. More over, we may consider using shared memory or other faster way to communicate between processes on a local machine.
 # (10) Consensus algorithm: add support for read requests which must be completed only by the coordinator.
 # Add support to frame::Service to start the unique part of Object::uid() from a given value.

Bugs:

 # Frame concept sample application doesn't stop when virtual machine is suspended then resumed.


Done:

 # DONE:IPC: Add support for authenticating the ipc sessions.
 # DONE:IPC: Find a better way to disconnect after a failed authentication
 # DONE:IPC: Add support for sending authentication commands while in authenticating state. Commands with AuthenticationFlag set.(NEEDS proper testing!!!!)
 # DONE: IPC: Check that a failed authentication, raises the objects waiting for commands to be sent. There seems to be a bug!!
 # DONE: Serialization: add support for specific objects: insertSpecific
 # DONE: Try to optimize the memory usage for foundation::Object, related to the signal queue, by moving the queue onto the foundation::Service.
 # DONE: Optimize specific memory cache by dropping usage of queues and using a simple linked list.
 # DONE: Add support for compressing ipc buffers.
 # DONE: Improve binary serialization performance and create better test applications
    * One should be able to register the same structure/class multiple times, every time being constructed on creation with a different constructor.
    * Also we need to be able to specify the position on which the map will be registered.
 # DONE: Modify the ipc::Service to make use of the changes in serialization. We need to be able to specify the type id of a signal to be sent.
 # DONE: Add support for pushUtf8(std::string&) to binary::serialization - the string will be serialized as null terminated data, i.e. no size.
 # DONE: Add support for limits to binary::serialization. Add the following methods and changes to both serializer and deserializer:
   * constructor(const Limits `*`pdefaultlimits); 
   * resetLimits(); //reset all limits to default
   * pushStringLimit(uint32(256)) / pushStringLimit(), reset to default.
   * pushStreamLimit(uint64(200000000)) / pushStreamLimit(), reset to default.
   * pushContainerLimit(uint32()) - pushContainerLimit(), reset to default.
 # DONE: Make system library compile on windows
 # DONE: Find a fix for thread safe static member within static function.