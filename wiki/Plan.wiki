#summary Planned additions and changes

<wiki:toc max_depth="1" />

This is a pool of pending features and changes
 # DONE: Try to optimize the memory usage for foundation::Object, related to the signal queue, by moving the queue onto the foundation::Service.
 # DONE: Optimize specific memory cache by dropping usage of queues and using a simple linked list.
 # Add new class foundation::AccessManager: a container which will manage read/write access to its objects.
 # Re-factor foundation::file::Manager to be based on foundation::AccessManager.
 # Foundation concept sample application doesn't stop when vmware virtual is suspended then resumed.
 # DONE: Add support for compressing ipc buffers.
 # Add support for Unix domain addresses.
 # Consensus algorithm: add support for read requests which must be completed only by the coordinator.
 # Add support to foundation::Service to start the unique part of Object::uid() from a random value - like time-stamp.
 # DONE: Improve binary serialization performance and create better test applications
    * One should be able to register the same structure/class multiple times, every time being constructed on creation with a different constructor.
    * Also we need to be able to specify the position on which the map will be registered.
 # DONE: Modify the ipc::Service to make use of the changes in serialization. We need to be able to specify the type id of a signal to be sent.
 # DONE: Add support for pushUtf8(std::string&) to binary::serialization - the string will be serialized as null terminated data, i.e. no size.
 # DONE: Add support for limits to binary::serialization. Add the following methods and changes to both serializer and deserializer:
   * constructor(const Limits `*`pdefaultlimits); 
   * resetLimits(); //reset all limits to default
   * pushStringLimit(uint32(256)) / pushStringLimit(), reset to default.
   * pushStreamLimit(uint64(200000000)) / pushStreamLimit(), reset to default.
   * pushContainerLimit(uint32()) - pushContainerLimit(), reset to default.

 