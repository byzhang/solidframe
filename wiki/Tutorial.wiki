#summary A step by step tutorial for start using SolidGround.

= Introduction =

Below I will present the steps you'll need to do to write your own SolidGround based application. Although in the beginning I will present how to setup the working space within the solidground/applications directory the rest of the text will present the proof of concept server from test/clientserver.

= Preparing the environment =

SolidGround (SG) is a framework which is also designed as a workspace. This means that your application should integrate into the SG's build system. I don't know if this is a good idea, but I believe it allows someone to easily start writing SG based code.

First of all you'll need to get a copy of the SG repository. See [
http://code.google.com/p/solidground/wiki/Introduction] (How to build and test the proof of concept server) wiki-page for the steps you need to do to build the SG's test applications.

Supposing that you successfully built the test applications, let's set up your application.

SG's build.sh creates a folder called "application" within the SG's folder. There's where your application should reside.

So you should do something like:
{{{
solidground $ svn co https://foobarsuite.googlecode.com/svn/trunk/ application
}}}


So you'll have a repository copy of your application within solidground/application. With no files and no folders. Lets add some (we suppose the foobarsuite contains: a client, a server and some test applications):
 # first you'll need to create the folders:
{{{
application $ mkdir foobar_server && svn add foobar_server
application $ mkdir foobar_client && svn add foobar_client
application $ mkdir test && svn add test
}}}
 # next you'll need the file that will integrate the application within SG's build system.
{{{
application $ cat > CMakeLists.txt
add_subdirectory (foobar_server)
add_subdirectory (foobar_client)
add_subdirectory (test)

CTRL+C
application $ touch foobar_server/CMakeLists.txt
application $ touch foobar_client/CMakeLists.txt
application $ touch test/CMakeLists.txt
}}}
 # then you'll need to add the source files to every foobar folder, along with the CMakeLists.txt files.

Because "foobar" is a fictional application/suite, I cannot continue with the structure. All I can point out is that you can have a look at SG's "test" and especially "test/clientserver" folder to get an idea of how the structure should look like.

Below I will present the structure of the proof of concept SG's test application.

= ClientServer test =

The SG's clientserver application is a quite complex multi service server, using and testing most of SG's features. The server has three services:
 * two services *echo* and *beta*, implementing echo and/or echo-like protocols over TCP and UDP.
 * an *alpha* service with a complex IMAP-like text protocol.
